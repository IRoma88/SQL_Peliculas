# -*- coding: utf-8 -*-
"""Copia de Proyecto final sql.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1U3zLjGjHi9ynDqCWmEuUzgmXFVSg22KE

# **Proyecto final de SQl**

Llegó la hora, es el momento de poner en práctica todo lo has aprendido de bases datos relacionales.

Para ello la plataforma de IMDb necesita hacer una serie de consultas para ver las mejores películas según sus ingresos, popularidad y votos, ademas de los mejores directores según la cantidad de ingresos totales de sus películas

IMDb es la fuente más popular y acreditada del mundo para contenido de películas, TV y celebridades. Explora películas y espectáculos de TV populares, noticias de entretenimiento y los últimos premios y eventos.

En esta base de datos encontraremos 2 tablas con las que vamos a trabajar:

- **directors**: se encuentran los datos de los directores
- **movies**: se encuentran los datos de las películas

El archivo de la base de datos descragable se adjunta en el siguiente enlace


[base de datos movies.sqlitel](https://drive.google.com/file/d/1lw6lSUsyYWXO-KgaVGZCB19OVOUHfj2-/view?usp=sharing)



Una vez descargado, lo único que tendrás que hacer es subirlo aquí.
"""

import numpy as np
import pandas as pd
import seaborn as sns
sns.set
import sqlite3

db = 'movies.sqlite'

con = sqlite3.connect(db)
cur = con.cursor()

"""#**1**
Para poder empezar a tratar los datos, primero vamos a probar a obtener todas las películas de su base de datos.

Para ello, deberás buscar en la tabla **movies**.




"""

cur.execute('select * from movies')
movies = cur.fetchall()
movies = pd.DataFrame(movies, columns = ['id', 'original_title', 'budget', 'popularity', 'release_date', 'revenue', 'title', 'vote_average', 'vote_count', 'overview', 'tagline', 'uid', 'director_id'])
movies.head()

#@title Comprueba el ejercicio
def check():
  if movies.iloc[0,0]== 43597 and movies.iloc[0,1]=='Avatar' and movies.iloc[0,2]==237000000 and movies.iloc[0,3]==150 :
    return 'Correcto'
  else:
    return 'Incorrecto'
check()

"""#**2**
Ahora que has conseguido todos los datos de las películas, veamos si puedes obtener todos los datos sobre los directores.

Para ello, deberemos buscar en la tabla **directors**.

"""

cur.execute('select * from directors')
directors = cur.fetchall()
directors = pd.DataFrame(directors, columns = ['name', 'id', 'gender', 'uid', 'department'])
directors.head()

#@title Comprueba el ejercicio
def check():
  if directors.iloc[3,0]== 'Christopher Nolan' and directors.iloc[3,1]==4765 and directors.iloc[3,2]==2 and directors.iloc[3,3]==525and directors.iloc[3,4]=='Directing' :
    return 'Correcto'
  else:
    return 'Incorrecto'
check()

"""#**3**
Ahora vamos a ver cuantas películas hay en total en la base de datos de IMDb

"""

cur.execute('select count (id) from movies ')
movies = cur.fetchall()
movies = pd.DataFrame(movies, columns = ['count movies'])
movies.head(3)

#@title Comprueba el ejercicio
def check():
  if movies.iloc[0,0]== 4773:
    return 'Correcto'
  else:
    return 'Incorrecto'
check()

"""#**4**

Vamos a por algo más difícil, encuentra estos 3 directores: James Cameron; Luc Besson; John Woo
"""

cur.execute("SELECT * FROM directors WHERE name IN ('James Cameron', 'Luc Besson', 'John Woo')")
movies = cur.fetchall()
movies = pd.DataFrame(movies, columns = ['name', 'id', 'gender', 'uid', 'department'])
movies.head(3)

#@title Comprueba el ejercicio
def check():
  if movies.iloc[0,0]== 'James Cameron' and movies.iloc[1,0]== 'John Woo'and movies.iloc[2,0]== 'Luc Besson':
    return 'Correcto'
  else:
    return 'Incorrecto'
check()

"""#**5**

Ahora queremos ver todos los directores cuyo nombre comience con Steven.
"""

cur.execute("SELECT * FROM directors WHERE name Like ('Steven%')")
movies = cur.fetchall()
movies = pd.DataFrame(movies, columns = ['name', 'id', 'gender', 'uid', 'department'])
movies.head(3)

#@title Comprueba el ejercicio
def check():
  if movies.iloc[0,0]== 'Steven Spielberg' and movies.iloc[1,0]== 'Steven Soderbergh'and movies.iloc[2,0]== 'Steven Brill':
    return 'Correcto'
  else:
    return 'Incorrecto'
check()

"""#**6**
Ahora vamos a hacer un recuento de todas las directoras.
"""

cur.execute('''
    SELECT count(*)
FROM directors
WHERE gender = 1;
''')
movies = cur.fetchall()
movies = pd.DataFrame(movies, columns = ['count direcor female'])
movies.head(3)

#@title Comprueba el ejercicio
def check():
  if movies.iloc[0,0]== 150:
    return 'Correcto'
  else:
    return 'Incorrecto'
check()

"""#**7**
Ahora que has contado todas las directoras vamos buscar a los primeros Hombres directores?
"""

cur.execute('''
    SELECT count(*)
FROM directors
WHERE gender = 2;
''')
movies = cur.fetchall()
movies = pd.DataFrame(directors,  columns = ['name'])
movies.head(3)

#@title Comprueba el ejercicio
def check():
  if movies.iloc[0,0]== 'James Cameron'and movies.iloc[1,0]== 'Gore Verbinski' and movies.iloc[2,0] =='Sam Mendes':
    return 'Correcto'
  else:
    return 'Incorrecto'
check()

"""#**8**
Vamos a ver cuáles son las 3 películas más populares
"""

cur.execute('select title from movies order by popularity desc')
movies = cur.fetchall()
movies = pd.DataFrame(movies, columns = ['original_title'])
movies.head(3)

#@title Comprueba el ejercicio
def check():
  if movies.iloc[0,0]== "Minions":
    return 'Correcto'
  else:
    return 'Incorrecto'
check()

"""#**9**
¿Cuáles son las 3 películas con mayor presupuesto?
"""

cur.execute('select title, popularity from movies order by budget desc')
movies = cur.fetchall()
movies = pd.DataFrame(movies, columns = ['original_title','popularity'])
movies.head(3)

#@title Comprueba el ejercicio
def check():
  if movies.iloc[0,0]== 'Pirates of the Caribbean: On Stranger Tides' and movies.iloc[0,1]== 135 and movies.iloc[1,0]== "Pirates of the Caribbean: At World's End" and movies.iloc[1,1]== 139 and movies.iloc[2,0]== 'Avengers: Age of Ultron' and movies.iloc[2,1]== 134:
    return 'Correcto'
  else:
    return 'Incorrecto'
check()

"""#**10**
 ¿Qué película tiene el voto promedio más otorgado desde el 1 de enero de 2000?
"""

cur.execute('''
    SELECT title, release_date
FROM movies
WHERE release_date > '2000-01-01'
ORDER BY vote_average DESC
LIMIT 1
''')
movies = cur.fetchall()
movies = pd.DataFrame(movies, columns = ['original_title','release_date'])
movies.head(3)

#@title Comprueba el ejercicio
def check():
  if movies.iloc[0,0]== 'Sardaarji' and movies.iloc[0,1]== '2015-06-26':
    return 'Correcto'
  else:
    return 'Incorrecto'
check()

"""#**11**

¿Cuáles son las películas que dirigió Brenda Chapman?
"""

cur.execute('''
SELECT original_title
FROM movies, directors
where movies.director_id = directors.id
 and name = 'Brenda Chapman';
''')
movies = cur.fetchall()
movies = pd.DataFrame(movies, columns = ['original_title'])
movies.head(3)

#@title Comprueba el ejercicio
def check():
  if movies.iloc[0,0]== 'Brave':
    return 'Correcto'
  else:
    return 'Incorrecto'
check()

"""#**12**
¿Cuál es el director que hizo más películas?
"""

cur.execute('''
SELECT name
FROM movies, directors
where movies.director_id = directors.id
group by name
order by count(name) desc
LIMIT 1
''')
movies = cur.fetchall()
movies = pd.DataFrame(movies, columns = ['name'])
movies.head(3)

#@title Comprueba el ejercicio
def check():
  if movies.iloc[0,0]== 'Steven Spielberg':
    return 'Correcto'
  else:
    return 'Incorrecto'
check()

"""#**13**

¿Cuál es el director más financiable?

**Pista**: Échale un vistazo al campo budget.
"""

cur.execute('''
SELECT name
FROM movies, directors
where movies.director_id = directors.id
group by name
order by count(budget) desc
LIMIT 1
''')
movies = cur.fetchall()
movies = pd.DataFrame(movies, columns = ['name'])
movies.head(3)

#@title Comprueba el ejercicio
def check():
  if movies.iloc[0,0]== 'Steven Spielberg':
    return 'Correcto'
  else:
    return 'Incorrecto'
check()

#@title Ejecuta este bloque y pega la salida en Nodd3r para corregir

import hashlib
cur.execute('SELECT * FROM movies;')
movies = cur.fetchall()
movies = pd.DataFrame(movies)
movies.head(3)
cur.execute('SELECT * FROM directors;')
directors = cur.fetchall()
directors = pd.DataFrame(directors)
directors.head(3)

correct = movies.iloc[0,4]+movies.iloc[19,4]+directors.iloc[0,4]+directors.iloc[0,4]

pwd = hashlib.sha256(str(correct).encode())
#print(pwd.hexdigest())
if pwd.hexdigest()[0:6] == 'e2b2a3':
  print('¡Felicidades! puedes avanzar al siguiente modulo \n El token es: ',pwd.hexdigest())
else:
  print('Hay algún error en el código o tu forma es diferente a la planteada, pregunta por el foro si no lo ves claro.')